üöÄ #10DaysCode Challenge - Day 88 üöÄ

Today, I explored Django, its directory structure, and how it works! üèóÔ∏èüí°

Django is a powerful Python web framework that follows the MVT (Model-View-Template) pattern, making web development faster and more organized. I learned:
‚úÖ The purpose of key files like settings.py, urls.py, views.py, and models.py
‚úÖ How Django manages static files, templates, and databases
‚úÖ The command-line tools that make development easier (django-admin, manage.py)

To solidify my understanding, I built a simple Django project where users can submit feedback, and it's stored in a SQLite database. This hands-on practice really helped me grasp the framework!
üîó Excited to continue my journey with Django and explore more features like authentication, API integration, and security best practices.

Have you worked with Django before? Any tips for a beginner? Let‚Äôs connect! üí¨üíª

#Django #Python #WebDevelopment #CyberSecurity #LearningByDoing #100DaysOfCode #Day88




Koi baat nahi! üòä Main aapko **Django** bilkul basic se samjhaunga, aur har step ko examples ke saath detail mein explain karunga. Aapko Flask ka thoda idea hai, toh Django samajhna aapke liye aur bhi easy hoga. Chaliye shuru karte hain:

---

### Django: Ekdam Basic Se

#### 1. **Django Kya Hai?**
Django ek **Python web framework** hai jo web applications banane mein madad karta hai. Ye **MVT (Model-View-Template)** architecture follow karta hai:
- **Model**: Database se related kaam.
- **View**: Logic aur data handling.
- **Template**: HTML files jo user ko dikhte hain.

---

### Step 1: Setup Your Environment

#### 1.1 **Python Install Karein**:
Django Python par based hai, isliye pehle Python install karna zaruri hai. Kali Linux mein Python already installed hota hai, lekin version check karne ke liye:
```bash
python3 --version
```

#### 1.2 **Virtual Environment Banayein**:
Virtual environment ek isolated space hai jahan aap apne project ke dependencies install kar sakte hain. Isse aapke system ke Python environment mein koi conflict nahi hoga.

- Virtual environment banane ke liye:
  ```bash
  python3 -m venv myenv
  ```

- Virtual environment activate karein:
  ```bash
  source myenv/bin/activate
  ```

  Agar aapka terminal prompt mein `(myenv)` dikhega, toh virtual environment successfully activate ho gaya hai.

---

### Step 2: Django Install Karein

Virtual environment mein Django install karein:
```bash
pip install django
```

Installation verify karne ke liye:
```bash
django-admin --version
```

---

### Step 3: Ek Naya Django Project Banayein

#### 3.1 **Project Create Karein**:
Django project banane ke liye yeh command use karein:
```bash
django-admin startproject myproject
```

Isse `myproject` naam ka ek folder banega, jiske andar yeh files hongi:
- `manage.py`: Project manage karne ke liye.
- `myproject/`: Project ka main folder.
  - `settings.py`: Project settings.
  - `urls.py`: URLs handle karne ke liye.
  - `wsgi.py`: Deployment ke liye.

#### 3.2 **Development Server Run Karein**:
Project folder mein jayein:
```bash
cd myproject
```

Development server start karein:
```bash
python manage.py runserver
```

Ab aap browser mein `http://127.0.0.1:8000` open karein. Aapko "The install worked successfully!" message dikhega.

---

### Step 4: Ek Naya Django App Banayein

Django mein har feature ko "app" ke roop mein organize kiya jata hai. Ek naya app banane ke liye:

#### 4.1 **App Create Karein**:
```bash
python manage.py startapp myapp
```

Isse `myapp` naam ka ek folder banega, jiske andar yeh files hongi:
- `models.py`: Database tables define karne ke liye.
- `views.py`: Logic handle karne ke liye.
- `admin.py`: Admin panel ke liye.
- `urls.py`: App ke URLs handle karne ke liye.

#### 4.2 **App ko Project Mein Add Karein**:
`myproject/settings.py` file mein `INSTALLED_APPS` mein `myapp` add karein:
```python
INSTALLED_APPS = [
    ...
    'myapp',
]
```

---

### Step 5: Models, Views, aur Templates

#### 5.1 **Model Banayein**:
`myapp/models.py` file mein ek model banayein. Maan lijiye hum ek `Product` model banate hain:
```python
from django.db import models

class Product(models.Model):
    name = models.CharField(max_length=100)
    price = models.DecimalField(max_digits=10, decimal_places=2)

    def __str__(self):
        return self.name
```

#### 5.2 **Migrations Run Karein**:
Database mein changes apply karne ke liye migrations run karein:
```bash
python manage.py makemigrations
python manage.py migrate
```

#### 5.3 **View Banayein**:
`myapp/views.py` file mein ek view banayein:
```python
from django.shortcuts import render
from .models import Product

def product_list(request):
    products = Product.objects.all()
    return render(request, 'myapp/product_list.html', {'products': products})
```

#### 5.4 **Template Banayein**:
`myapp/templates/myapp/product_list.html` file banayein:
```html
<h1>Products</h1>
<ul>
    {% for product in products %}
        <li>{{ product.name }} - ‚Çπ{{ product.price }}</li>
    {% endfor %}
</ul>
```

---

### Step 6: URLs Setup Karein

#### 6.1 **App ke URLs Define Karein**:
`myapp/urls.py` file banayein:
```python
from django.urls import path
from . import views

urlpatterns = [
    path('products/', views.product_list, name='product_list'),
]
```

#### 6.2 **Project ke URLs Mein App ke URLs Include Karein**:
`myproject/urls.py` file mein:
```python
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('myapp.urls')),
]
```

---

### Step 7: Admin Panel

#### 7.1 **Superuser Banayein**:
Admin panel use karne ke liye superuser banayein:
```bash
python manage.py createsuperuser
```

#### 7.2 **Model ko Admin Mein Register Karein**:
`myapp/admin.py` file mein:
```python
from django.contrib import admin
from .models import Product

admin.site.register(Product)
```

Ab aap `http://127.0.0.1:8000/admin` par jaa kar admin panel use kar sakte hain.

---

### Step 8: Static Files (CSS, JS, Images)

#### 8.1 **Static Files ka Setup Karein**:
`myproject/settings.py` file mein:
```python
STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "static"]
```

#### 8.2 **Static Files Add Karein**:
`static/` folder banayein aur usme CSS, JS, aur images add karein.

---

### Step 9: Deployment

#### 9.1 **Static Files Collect Karein**:
```bash
python manage.py collectstatic
```

#### 9.2 **Heroku, PythonAnywhere, ya AWS par Deploy Karein**.

---

### Example Project:
Aap ek simple project banayein, jaise:
- **Blog**: Users blog posts create, read, update, aur delete kar sakte hain.
- **E-commerce**: Products display karein aur users unhe cart mein add kar sakte hain.

---

Agar aapko kisi specific topic par aur help chahiye ya koi aur sawal hai toh poochh sakte hain! üòä
